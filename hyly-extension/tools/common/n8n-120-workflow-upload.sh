#!/bin/bash

# n8n-120-workflow-upload.sh - Unified n8n workflow upload with API verification
# Usage: ./n8n-120-workflow-upload.sh <workflow-id>
# 
# Features:
# - Direct SQLite upload (fast, proven)
# - API verification (lightweight, no export)
# - HTML/MD reporting (generated by default)
# - Fix validation support
# - Fail-fast approach
#
# Advanced options:
#   --noreport: Suppress HTML report generation
#   --input <file>: Specify input file instead of latest edited

set -euo pipefail

# Source common functions for report generation
SCRIPT_DIR="$(dirname "$0")"
source "$SCRIPT_DIR/n8n-000-common.sh"

# Parse arguments
WORKFLOW_ID=""
REPORT=true  # Default to true - always generate report
INPUT_FILE=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --noreport)
            REPORT=false
            shift
            ;;
        --input)
            INPUT_FILE="$2"
            shift 2
            ;;
        --report)  # Keep for backward compatibility but ignore
            shift
            ;;
        *)
            if [ -z "$WORKFLOW_ID" ]; then
                WORKFLOW_ID="$1"
            fi
            shift
            ;;
    esac
done

if [ -z "$WORKFLOW_ID" ]; then
    echo "❌ Usage: $0 <workflow-id>"
    echo ""
    echo "Advanced options:"
    echo "  --noreport      Suppress HTML report generation"
    echo "  --input <file>  Specify input file instead of latest edited"
    exit 1
fi

info "Starting unified upload for workflow: $WORKFLOW_ID"

# Get environment variables (match n8n-100-workflow-extract.sh pattern)
N8N_HOST="http://localhost:5678"
N8N_API_KEY="${N8N_API_KEY:-$(grep N8N_API_KEY /home/mg/src/vc-mgr/.env 2>/dev/null | cut -d'=' -f2)}"

if [ -z "$N8N_API_KEY" ]; then
    error "N8N_API_KEY environment variable not set!"
fi

# Source common functions
SCRIPT_DIR="$(dirname "$0")"
source "$SCRIPT_DIR/n8n-000-common.sh"

# Get workflow directory using the common function
WORKFLOW_DIR=$(get_workflow_dir) || error "Failed to find workflow directory"

if [ "$WORKFLOW_DIR" = "." ]; then
    error "Not on a workflow branch or workflow directory not found"
fi

info "Workflow directory: $WORKFLOW_DIR"
cd "$WORKFLOW_DIR"

# Find input file - use provided or find latest edited
if [ -n "$INPUT_FILE" ]; then
    LATEST_EDITED="$INPUT_FILE"
    if [ ! -f "$LATEST_EDITED" ]; then
        error "Specified input file not found: $INPUT_FILE"
    fi
else
    LATEST_EDITED=$(find lifecycle -name "*-${WORKFLOW_ID}-01-edited.json" 2>/dev/null | sort -r | head -1) || error "No edited files found"
    
    if [ -z "$LATEST_EDITED" ]; then
        error "No edited file found for workflow $WORKFLOW_ID in $WORKFLOW_DIR/lifecycle/"
    fi
fi

info "Using input file: $(basename "$LATEST_EDITED")"

# Read workflow JSON
WORKFLOW_JSON=$(cat "$LATEST_EDITED") || error "Failed to read workflow file"

# Extract workflow name from JSON and add timestamp
WORKFLOW_NAME_BASE=$(echo "$WORKFLOW_JSON" | jq -r '.name // "Updated Workflow"') || error "Failed to parse workflow name"

# Generate timestamp for this upload
TIMESTAMP=$(TZ=America/New_York date +%Y%m%d-%H%M%S)

# Clean any existing timestamps (both with and without 'v' prefix) and add new one
WORKFLOW_NAME_CLEAN=$(echo "$WORKFLOW_NAME_BASE" | sed 's/v[0-9]\{8\}-[0-9]\{6\}//g' | sed 's/[0-9]\{8\}-[0-9]\{6\}//g' | sed 's/  */ /g' | sed 's/^ *//;s/ *$//')
WORKFLOW_NAME_UPLOAD="$WORKFLOW_NAME_CLEAN v$TIMESTAMP"

info "Uploading with name: $WORKFLOW_NAME_UPLOAD"

# Create lifecycle directory
mkdir -p lifecycle

# Stage 1: Direct SQLite Upload (fail-fast)
info "Uploading to n8n database via SQLite..."

# Create a temporary file with the workflow JSON
TEMP_JSON=$(mktemp) || error "Failed to create temp file"
echo "$WORKFLOW_JSON" > "$TEMP_JSON"

# Update workflow directly in SQLite database
RESULT=$(docker exec -i n8n node -e "
const sqlite3 = require('/usr/local/lib/node_modules/n8n/node_modules/.pnpm/sqlite3@5.1.7/node_modules/sqlite3');
const fs = require('fs');
const db = new sqlite3.Database('/home/node/.n8n/database.sqlite');

// Read from stdin
let input = '';
process.stdin.on('data', (chunk) => { input += chunk; });
process.stdin.on('end', () => {
  try {
    const workflow = JSON.parse(input);
    const name = '$WORKFLOW_NAME_UPLOAD';
    const nodes = JSON.stringify(workflow.nodes || []);
    const connections = JSON.stringify(workflow.connections || {});
    const settings = JSON.stringify(workflow.settings || {});
    const pinData = workflow.pinData ? JSON.stringify(workflow.pinData) : null;
    const staticData = workflow.staticData ? JSON.stringify(workflow.staticData) : null;
    
    db.run('UPDATE workflow_entity SET name = ?, nodes = ?, connections = ?, settings = ?, pinData = ?, staticData = ?, updatedAt = datetime(\\\"now\\\") WHERE id = ?', 
      [name, nodes, connections, settings, pinData, staticData, '$WORKFLOW_ID'], 
      function(err) {
        if (err) {
          console.log('Error:', err);
          process.exit(1);
        } else if (this.changes === 0) {
          console.log('Error: Workflow not found');
          process.exit(1);
        } else {
          console.log('Updated workflow with', this.changes, 'changes');
          process.exit(0);
        }
        db.close();
      }
    );
  } catch (err) {
    console.log('JSON parse error:', err);
    process.exit(1);
  }
});
" < "$TEMP_JSON") || error "Failed to upload workflow to n8n database"

rm -f "$TEMP_JSON"
success "Workflow uploaded to SQLite database"

# Create uploaded file (02-uploaded)
UPLOADED_FILE="lifecycle/${TIMESTAMP}-${WORKFLOW_ID}-02-uploaded.json"
echo "$WORKFLOW_JSON" | jq --arg name "$WORKFLOW_NAME_UPLOAD" '.name = $name' > "$UPLOADED_FILE" || error "Failed to create uploaded file"

# Wait for n8n to process
sleep 2

# Stage 2: API Verification (fail-fast, lightweight)
info "Verifying upload via API..."

# Use curl to get workflow via API (no file creation)
API_RESPONSE=$(curl -sf "$N8N_HOST/api/v1/workflows/$WORKFLOW_ID" \
  -H "X-N8N-API-KEY: $N8N_API_KEY") || error "Failed to verify workflow via API"

# Extract verification data (no file save)
VERIFIED_NAME=$(echo "$API_RESPONSE" | jq -r '.name // "Unknown"') || error "Failed to parse verified name"
VERIFIED_NODES=$(echo "$API_RESPONSE" | jq '.nodes | length' 2>/dev/null || echo "0")
UPLOADED_NODES=$(jq '.nodes | length' "$UPLOADED_FILE" 2>/dev/null || echo "0")

# Verification checks (fail-fast)
if [ "$UPLOADED_NODES" -ne "$VERIFIED_NODES" ]; then
    error "VERIFICATION FAILED: Node count mismatch (uploaded: $UPLOADED_NODES, verified: $VERIFIED_NODES)"
fi

if [ "$VERIFIED_NAME" != "$WORKFLOW_NAME_UPLOAD" ]; then
    error "VERIFICATION FAILED: Name mismatch (expected: $WORKFLOW_NAME_UPLOAD, got: $VERIFIED_NAME)"
fi

if [ "$UPLOADED_NODES" -eq 0 ]; then
    error "VERIFICATION FAILED: No nodes found in workflow"
fi

success "API verification passed"

# Stage 3: Fix Validation (if needed)
FIX_VALIDATION_STATUS=""
LATEST_FIX_FINAL=$(ls -t "$WORKFLOW_DIR/lifecycle/"*-"$WORKFLOW_ID"-09-fix-final.json 2>/dev/null | head -1 || echo "")

if [ -n "$LATEST_FIX_FINAL" ]; then
    info "Validating applied fixes from $(basename "$LATEST_FIX_FINAL")..."
    
    # Extract expected nodes from fix-final.json
    EXPECTED_NODES=$(jq -r '.fixes[]? | select(.type == "addNode") | .nodeDefinition.name // .changes.name // empty' "$LATEST_FIX_FINAL" 2>/dev/null || echo "")
    
    FIX_VALIDATION_FAILED=false
    
    # Check if expected nodes exist in verified API response
    while IFS= read -r node_name; do
        if [ -n "$node_name" ]; then
            if ! echo "$API_RESPONSE" | jq -e ".nodes[]? | select(.name == \"$node_name\")" >/dev/null 2>&1; then
                warning "Expected node '$node_name' not found in verified workflow"
                FIX_VALIDATION_FAILED=true
            fi
        fi
    done <<< "$EXPECTED_NODES"
    
    if [ "$FIX_VALIDATION_FAILED" = "true" ]; then
        error "VALIDATION FAILED: Some fixes from $(basename "$LATEST_FIX_FINAL") were not applied correctly"
    else
        FIX_VALIDATION_STATUS="✅ Fix validation: All changes from $(basename "$LATEST_FIX_FINAL") confirmed"
    fi
fi

# Stage 4: Report Generation (if requested)
if [ "$REPORT" = "true" ]; then
    info "Generating HTML/MD report..."
    
    HTML_FILE="lifecycle/${TIMESTAMP}-${WORKFLOW_ID}-02-uploaded.html"
    
    # Create unified HTML report
    create_n8n_html_report "$HTML_FILE" \
        "n8n Upload Report - $WORKFLOW_ID" \
        "[✅ Upload Successful]" \
        "$WORKFLOW_ID" \
        "$VERIFIED_NAME" \
        "$TIMESTAMP" \
        "n8n-120-workflow-upload.sh"
    
    # Add info table
    start_info_table "$HTML_FILE"
    add_info_row "$HTML_FILE" "Nodes" "$VERIFIED_NODES"
    add_info_row "$HTML_FILE" "Method" "SQLite Upload + API Verification"
    add_info_row "$HTML_FILE" "Active" "$(jq -r '.active // false' "$UPLOADED_FILE" 2>/dev/null || echo "false")"
    add_info_row "$HTML_FILE" "Input File" "<code>$(basename "$LATEST_EDITED")</code>"
    add_info_row "$HTML_FILE" "Output Files" "<code>$(basename "$UPLOADED_FILE")</code><br><code>$(basename "$HTML_FILE")</code>"
    end_info_table "$HTML_FILE"
    
    # Add notes section
    if [ -n "$FIX_VALIDATION_STATUS" ]; then
        add_notes_section "$HTML_FILE" "Verification Notes" \
            "✅ SQLite upload successful" \
            "✅ API verification passed ($VERIFIED_NODES nodes confirmed)" \
            "✅ Workflow name updated to $VERIFIED_NAME" \
            "✅ Lifecycle tracking: 01-edited → 02-uploaded" \
            "$FIX_VALIDATION_STATUS"
    else
        add_notes_section "$HTML_FILE" "Verification Notes" \
            "✅ SQLite upload successful" \
            "✅ API verification passed ($VERIFIED_NODES nodes confirmed)" \
            "✅ Workflow name updated to $VERIFIED_NAME" \
            "✅ Lifecycle tracking: 01-edited → 02-uploaded"
    fi
    
    # Finalize with footer
    finalize_html_report "$HTML_FILE" "n8n-120-workflow-upload.sh"
    
    # Open in browser
    open_in_browser "$HTML_FILE"
    
    success "HTML report created: $HTML_FILE"
fi

# Final success message
success "n8n workflow upload completed successfully!"
echo "✅ Workflow: $VERIFIED_NAME (ID: $WORKFLOW_ID)"
echo "✅ Nodes: $VERIFIED_NODES"
echo "✅ Method: SQLite + API Verification"
[ -n "$FIX_VALIDATION_STATUS" ] && echo "$FIX_VALIDATION_STATUS"
echo ""
echo "Lifecycle files:"
echo "  - 01-edited:   $(basename "$LATEST_EDITED")"
echo "  - 02-uploaded: $(basename "$UPLOADED_FILE")"
[ "$REPORT" = "true" ] && echo "  - HTML report: $(basename "$HTML_FILE")"