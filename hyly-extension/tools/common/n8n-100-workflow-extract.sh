#!/bin/bash
# Extract n8n workflow via API by workflow ID
# Usage: ./n8n-100-workflow-extract.sh <workflow_id>
# Default: Saves to workflow_dir/lifecycle/{timestamp}-{workflow-id}-04-workflow.json
# Options (advanced):
#   --noreport: Suppress HTML report generation (reports generated by default)
#   --output <file>: Specify custom output file
#   --context: Save to workflow_dir/context/ instead of lifecycle/

set -e

# Source common functions for report generation
SCRIPT_DIR="$(dirname "$0")"
source "$SCRIPT_DIR/n8n-000-common.sh"

# Check for flags
CONTEXT_MODE=false
REPORT_MODE=true  # Default to true - always generate report
OUTPUT_FILE=""
while [[ $# -gt 0 ]]; do
    case $1 in
        --context)
            CONTEXT_MODE=true
            shift
            ;;
        --noreport)
            REPORT_MODE=false
            shift
            ;;
        --output)
            OUTPUT_FILE="$2"
            shift 2
            ;;
        --report)  # Keep for backward compatibility but ignore
            shift
            ;;
        *)
            break
            ;;
    esac
done

# Check parameters
if [ $# -ne 1 ]; then
    echo "‚ùå Usage: $0 <workflow_id>"
    echo "Examples:"
    echo "  $0 abc123def456"
    echo ""
    echo "Advanced options:"
    echo "  --noreport        Suppress HTML report generation"
    echo "  --output <file>   Specify custom output file"
    echo "  --context         Save to context/ instead of lifecycle/"
    exit 1
fi

WORKFLOW_ID="$1"
WORKFLOW_DIR=$(get_workflow_dir)
TIMESTAMP=$(generate_timestamp)

# Validate workflow directory
if [ ! -d "$WORKFLOW_DIR" ]; then
    echo "‚ùå Workflow directory does not exist: $WORKFLOW_DIR"
    exit 1
fi

# Determine target directory based on mode
if [ "$CONTEXT_MODE" = true ]; then
    TARGET_DIR="$WORKFLOW_DIR/context"
else
    TARGET_DIR="$WORKFLOW_DIR/lifecycle"
fi

# Create target subdirectory if it doesn't exist
mkdir -p "$TARGET_DIR"

# Output file path - use provided or generate default
if [ -z "$OUTPUT_FILE" ]; then
    OUTPUT_FILE="$TARGET_DIR/${TIMESTAMP}-${WORKFLOW_ID}-04-workflow.json"
fi

echo "üåê Extract n8n Workflow via API"
echo "üìã Workflow ID: $WORKFLOW_ID"
if [ "$CONTEXT_MODE" = true ]; then
    echo "üìÅ Target directory: $WORKFLOW_DIR/context (context mode)"
else
    echo "üìÅ Target directory: $WORKFLOW_DIR/lifecycle"
fi
echo ""

# Check if n8n is running and API key is set
N8N_API_KEY="${N8N_API_KEY:-$(grep N8N_API_KEY /home/mg/src/vc-mgr/.env 2>/dev/null | cut -d'=' -f2)}"
if [ -z "$N8N_API_KEY" ]; then
    echo "‚ùå N8N_API_KEY environment variable not set!"
    echo "Check: echo \$N8N_API_KEY"
    echo "Check: grep N8N_API_KEY .env"
    exit 1
fi

# Test API connectivity
if ! curl -s -f -H "X-N8N-API-KEY: $N8N_API_KEY" "http://localhost:5678/api/v1/workflows?limit=1" > /dev/null; then
    echo "‚ùå n8n API not accessible!"
    echo "Check: docker ps | grep n8n"
    echo "Check: curl -H \"X-N8N-API-KEY: \$N8N_API_KEY\" http://localhost:5678/api/v1/workflows"
    exit 1
fi

echo "üìÑ Extracting workflow: $WORKFLOW_ID"

# Get workflow data from API
WORKFLOW_DATA=$(curl -s -H "X-N8N-API-KEY: $N8N_API_KEY" "http://localhost:5678/api/v1/workflows/$WORKFLOW_ID")

# Check if workflow was found
if echo "$WORKFLOW_DATA" | jq -e '.id' > /dev/null 2>&1; then
    # Format and save the JSON
    echo "$WORKFLOW_DATA" | jq '.' > "$OUTPUT_FILE"
    
    echo "‚úÖ Workflow extracted successfully!"
    echo "üìÑ Saved to: $OUTPUT_FILE"
    
    # Show workflow info
    WF_NAME=$(echo "$WORKFLOW_DATA" | jq -r '.name // "Unknown"')
    NODE_COUNT=$(echo "$WORKFLOW_DATA" | jq '.nodes | length // 0')
    ACTIVE_STATUS=$(echo "$WORKFLOW_DATA" | jq -r '.active // false')
    
    echo ""
    echo "üìä Workflow Details:"
    echo "  üìã Name: $WF_NAME"
    echo "  üîß Nodes: $NODE_COUNT"
    echo "  ‚ö° Active: $ACTIVE_STATUS"
    
    # Show file size
    if [ -f "$OUTPUT_FILE" ]; then
        FILE_SIZE=$(ls -lh "$OUTPUT_FILE" | awk '{print $5}')
        echo "  üìè Size: $FILE_SIZE"
    fi
    
    # Generate report if requested
    if [ "$REPORT_MODE" = true ]; then
        info "Generating workflow extraction report..."
        
        HTML_FILE="${OUTPUT_FILE%.json}.html"
        
        # Create unified HTML report
        create_n8n_html_report "$HTML_FILE" \
            "n8n Extract Report - $WORKFLOW_ID" \
            "[üì• Extract Complete]" \
            "$WORKFLOW_ID" \
            "$WF_NAME" \
            "$TIMESTAMP" \
            "n8n-100-workflow-extract.sh"
        
        # Add info table
        start_info_table "$HTML_FILE"
        add_info_row "$HTML_FILE" "Nodes" "$NODE_COUNT"
        add_info_row "$HTML_FILE" "Active" "$ACTIVE_STATUS"
        add_info_row "$HTML_FILE" "Size" "$FILE_SIZE"
        add_info_row "$HTML_FILE" "Mode" "$([ "$CONTEXT_MODE" = true ] && echo "Context (reference)" || echo "Lifecycle (processing)")"
        add_info_row "$HTML_FILE" "Output File" "<code>$(basename "$OUTPUT_FILE")</code>"
        end_info_table "$HTML_FILE"
        
        # Add notes section
        add_notes_section "$HTML_FILE" "Extraction Notes" \
            "‚úÖ API connection successful" \
            "‚úÖ Workflow definition extracted ($NODE_COUNT nodes)" \
            "‚úÖ Saved to $([ "$CONTEXT_MODE" = true ] && echo "context/ for reference" || echo "lifecycle/ for processing")" \
            "üìä File size: $FILE_SIZE"
        
        # Finalize with footer
        finalize_html_report "$HTML_FILE" "n8n-100-workflow-extract.sh"
        
        # Open in browser
        open_in_browser "$HTML_FILE"
        
        success "Report generated: $(basename "$HTML_FILE")"
    fi
    
    # Output file created
    echo ""
    if [ "$CONTEXT_MODE" = true ]; then
        echo "üìå Context file created for reference"
    else
        echo "üìå Lifecycle file created for next steps"
    fi
    
    exit 0
else
    echo "‚ùå Workflow $WORKFLOW_ID not found or API error"
    echo "Response: $WORKFLOW_DATA"
    exit 1
fi